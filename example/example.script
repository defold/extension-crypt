local function hash1()
	local expected = {0x42,0x42,0x72,0x63,0xa1,0x9a,0x68,0x8c,0x5f,0x90,0x11,0x61,0x6f,0xb1,0x29,0x25,0x11,0x81,0x76,0x96}
	local buffer = "sha1 string to encrypt"

	local digest = crypt.hash_sha1(buffer)
	print("sha1 source:", buffer)

	local digest_str = ""
	for i=1,#digest do
		local byte = digest:byte(i, i)
		assert(byte == expected[i])
		digest_str = digest_str .. tostring(byte) .. ((i < #digest) and "," or "")
	end
	print("sha1 digest:", digest_str)
end

local function hash256()
	local expected = {0x4E,0x95,0x18,0x57,0x54,0x22,0xC9,0x08,0x73,0x96,0x88,0x7C,0xE2,0x04,0x77,0xAB,0x5F,0x55,0x0A,0x4A,0xA3,0xD1,0x61,0xC5,0xC2,0x2A,0x99,0x6B,0x0A,0xBB,0x8B,0x35}
	local buffer = "This is a string"

	local digest = crypt.hash_sha256(buffer)
	print("sha256 source:", buffer)

	local digest_str = ""
	for i=1,#digest do
		local byte = digest:byte(i, i)
		assert(byte == expected[i])
		digest_str = digest_str .. tostring(byte) .. ((i < #digest) and "," or "")
	end
	print("sha256 digest:", digest_str)
end

local function hash512()
	local expected = {0xd7,0x9e,0x74,0x75,0xf0,0x47,0xad,0x6a,0xbf,0xb9,0x8a,0xf2,0x0a,0x50,0x1f,0x1f,0x5c,0x03,0xa2,0x4a,0xc4,0xe4,0x22,0x32,0x1b,0xcc,0x7c,0xe6,0x6b,0x14,0xb6,0xfa,0x36,0x56,0x73,0x41,0x34,0x03,0xce,0x8e,0xb4,0x63,0xad,0x61,0xbe,0xbf,0xa2,0x2f,0x1a,0x2f,0x56,0xf6,0xf4,0x94,0x7c,0x25,0xd2,0xb1,0x84,0xd1,0xda,0x23,0x1c,0x27}
	local buffer = "sha512 string to encrypt"

	local digest = crypt.hash_sha512(buffer)
	print("sha512 source:", buffer)

	local digest_str = ""
	for i=1,#digest do
		local byte = digest:byte(i, i)
		assert(byte == expected[i])
		digest_str = digest_str .. tostring(byte) .. ((i < #digest) and "," or "")
	end
	print("sha512 digest:", digest_str)
end

local function hashmd5()
	local expected = {0x32,0x2f,0xcc,0x89,0xb5,0xec,0xc5,0xe9,0x0a,0x9e,0x73,0xb0,0xe0,0x92,0xbd,0xfc}
	local buffer = "Md5 string to encrypt"

	local digest = crypt.hash_md5(buffer)
	print("Md5 source:", buffer)

	local digest_str = ""
	for i=1,#digest do
		local byte = digest:byte(i, i)
		assert(byte == expected[i])
		digest_str = digest_str .. tostring(byte) .. ((i < #digest) and "," or "")
	end
	print("Md5 digest:", digest_str)
end

local function base64()
	for i = 1,20 do
		local source = ("a"):rep(i)
		print("b64 source:", source)
		local encoded = crypt.encode_base64(source)
		print("b64 encode:", encoded)
		local decoded = crypt.decode_base64(encoded)
		print("b64 decode:", decoded)
		assert(source == decoded)
	end

	local table = { foo = "bar" }
	pprint("table - source:", table)
	local encoded = crypt.encode_base64(sys.serialize(table))
	print("table - sys.serialize + b64 encode:", encoded)
	local decoded = sys.deserialize(crypt.decode_base64(encoded))
	pprint("table - b64 decode + sys.deserialize:", decoded)
end

local function encrypt_decrypt_xtea()
	local test_string = "test string \t test aaaAAAAaaa123456789"
	print("*****ENCRYPT/DECRYPT*****")
	print("input:" .. test_string)

	local keys = {
		"",--empty also worked
		"ABDCEFG12345",
		"DEFOLD CRYPT"
	}
	for _, key in ipairs(keys) do
		local encrypt = crypt.encrypt_xtea(test_string, key)
		local decrypt = crypt.decrypt_xtea(encrypt, key)
		print("key:" .. key)
		print("result:" .. encrypt)
		print("decrypt:" .. decrypt)
		assert(decrypt == test_string)
		assert(crypt.decrypt_xtea(encrypt, "bad key") ~= test_string)
	end

	local key17 = "1234567890abcdefg"
	local status, error =pcall(crypt.encrypt_xtea, test_string, key17)
	assert(not status)
	assert(error == "key should be <=16")
	status, error =pcall(crypt.decrypt_xtea, test_string, key17)
	assert(not status)
	assert(error == "key should be <=16")

	

	local test_string_zero_char = "test string\n\t\0 test aaaAAAAaaa123456789"
	local encrypt_0 = crypt.encrypt_xtea(test_string_zero_char, "a")
	local decrypt_0 = crypt.decrypt_xtea(encrypt_0, "a")
	assert(test_string_zero_char == decrypt_0)


	
end

function init(self)
	hash1()
	hash256()
	hash512()
	hashmd5()
	base64()
	encrypt_decrypt_xtea()
end
